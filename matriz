<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Transcriptor de Voz">
    <meta name="theme-color" content="#1a2a6c">
    
    <!-- Manifiesto de la aplicación -->
    <link rel="manifest" href="manifest.json">
    
    <!-- Iconos para diferentes dispositivos -->
    <link rel="apple-touch-icon" href="icons/icon-152x152.png">
    <link rel="icon" type="image/png" sizes="192x192" href="icons/icon-192x192.png">
    <link rel="icon" type="image/png" sizes="512x512" href="icons/icon-512x512.png">
    
    <title>Transcriptor y Resumidor de Voz</title>
    <style>
        * {
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            min-height: 100vh;
            padding: 20px;
            color: #333;
            margin: 0;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
        }
        
        h1 {
            text-align: center;
            color: #1a2a6c;
            margin-bottom: 30px;
            font-size: 2.5rem;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }
        
        button {
            padding: 12px 24px;
            border: none;
            border-radius: 50px;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            color: white;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            -webkit-tap-highlight-color: transparent;
        }
        
        #startBtn {
            background: linear-gradient(to right, #4CAF50, #45a049);
        }
        
        #stopBtn {
            background: linear-gradient(to right, #f44336, #d32f2f);
        }
        
        #summarizeBtn {
            background: linear-gradient(to right, #2196F3, #0b7dda);
        }
        
        #toggleApiBtn {
            background: linear-gradient(to right, #9c27b0, #7b1fa2);
            font-size: 0.9rem;
        }
        
        #checkModelsBtn {
            background: linear-gradient(to right, #ff9800, #f57c00);
            font-size: 0.9rem;
        }
        
        #installBtn {
            background: linear-gradient(to right, #009688, #00796b);
            font-size: 0.9rem;
            display: none;
        }
        
        button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }
        
        button:active {
            transform: translateY(1px);
        }
        
        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        .section {
            background: #f9f9f9;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }
        
        h2 {
            color: #1a2a6c;
            margin-top: 0;
            border-bottom: 2px solid #fdbb2d;
            padding-bottom: 10px;
        }
        
        .output {
            min-height: 150px;
            padding: 15px;
            background: white;
            border-radius: 10px;
            border: 1px solid #ddd;
            white-space: pre-wrap;
            line-height: 1.6;
        }
        
        .status {
            text-align: center;
            margin: 15px 0;
            font-weight: bold;
            color: #b21f1f;
        }
        
        .loader {
            border: 5px solid #f3f3f3;
            border-top: 5px solid #1a2a6c;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
            display: none;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .api-keys {
            margin: 20px 0;
        }
        
        .api-key {
            padding: 15px;
            background: #e8f4fc;
            border-radius: 10px;
            margin-bottom: 15px;
        }
        
        .api-key label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #1a2a6c;
        }
        
        .api-key input, .api-key select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1rem;
        }
        
        .hidden {
            display: none;
        }
        
        .note {
            background: #fff8e1;
            border-left: 4px solid #ffc107;
            padding: 10px 15px;
            margin: 15px 0;
            border-radius: 0 5px 5px 0;
        }
        
        .model-selector {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 15px 0;
        }
        
        .model-option {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .model-option input[type="radio"] {
            margin: 0;
        }
        
        .error-message {
            background: #ffebee;
            border-left: 4px solid #f44336;
            padding: 10px 15px;
            margin: 15px 0;
            border-radius: 0 5px 5px 0;
            color: #c62828;
        }
        
        .debug-info {
            background: #e8f5e9;
            border-left: 4px solid #4caf50;
            padding: 10px 15px;
            margin: 15px 0;
            border-radius: 0 5px 5px 0;
            color: #2e7d32;
            font-family: monospace;
            font-size: 0.9rem;
            max-height: 200px;
            overflow-y: auto;
        }
        
        .connection-options {
            margin-top: 10px;
            padding: 10px;
            background: #f5f5f5;
            border-radius: 5px;
        }
        
        .connection-options label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .proxy-status {
            margin-top: 5px;
            padding: 5px;
            border-radius: 3px;
            font-size: 0.8rem;
        }
        
        .proxy-working {
            background: #e8f5e9;
            color: #2e7d32;
        }
        
        .proxy-failed {
            background: #ffebee;
            color: #c62828;
        }
        
        .solution-box {
            background: #e3f2fd;
            border-left: 4px solid #2196f3;
            padding: 15px;
            margin: 15px 0;
            border-radius: 0 5px 5px 0;
        }
        
        .solution-box h3 {
            margin-top: 0;
            color: #0d47a1;
        }
        
        .solution-box ol {
            padding-left: 20px;
        }
        
        .solution-box li {
            margin-bottom: 8px;
        }
        
        /* 3D Effect for Transcription */
        .transcription-3d-container {
            perspective: 1000px;
            margin: 0;
            padding: 0;
        }
        
        #transcription {
            min-height: 150px;
            padding: 15px;
            background: white;
            border-radius: 10px;
            border: 1px solid #ddd;
            white-space: pre-wrap;
            line-height: 1.6;
            transform-style: preserve-3d;
            transition: transform 0.6s ease;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            position: relative;
        }
        
        #transcription:hover {
            transform: rotateX(10deg) rotateY(15deg) translateZ(20px);
            box-shadow: 
                0 15px 30px rgba(0, 0, 0, 0.2),
                0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        #transcription::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0) 50%);
            border-radius: 10px;
            z-index: 1;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        #transcription:hover::before {
            opacity: 1;
        }
        
        #transcription .content {
            position: relative;
            z-index: 2;
        }
        
        /* Estilos específicos para iPhone */
        @media (max-width: 768px) {
            .container {
                padding: 20px;
                border-radius: 15px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            button {
                padding: 10px 20px;
                font-size: 0.9rem;
            }
            
            .controls {
                gap: 10px;
            }
        }
        
        /* Estilos para modo pantalla completa */
        @media (display-mode: standalone) {
            body {
                background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
                height: 100vh;
                overflow-y: auto;
                -webkit-overflow-scrolling: touch;
            }
            
            .container {
                margin-bottom: 30px;
            }
        }
        
        /* Notificación de instalación */
        .install-notification {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 15px 25px;
            border-radius: 50px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            display: flex;
            align-items: center;
            gap: 15px;
            animation: slideUp 0.5s ease-out;
        }
        
        @keyframes slideUp {
            from {
                transform: translateX(-50%) translateY(100px);
                opacity: 0;
            }
            to {
                transform: translateX(-50%) translateY(0);
                opacity: 1;
            }
        }
        
        .install-notification button {
            padding: 8px 16px;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🎤 Transcriptor y Resumidor de Voz</h1>
        
        <div class="controls">
            <button id="startBtn">🎙️ Iniciar Grabación</button>
            <button id="stopBtn" disabled>⏹️ Detener Grabación</button>
            <button id="summarizeBtn" disabled>📝 Generar Resumen</button>
            <button id="toggleApiBtn">🔑 Mostrar APIs</button>
            <button id="checkModelsBtn" class="hidden">🔍 Ver Modelos</button>
            <button id="installBtn">📱 Instalar App</button>
        </div>
        
        <div class="status" id="status"></div>
        <div class="loader" id="loader"></div>
        
        <div class="section">
            <h2>📝 Transcripción</h2>
            <div class="transcription-3d-container">
                <div id="transcription" class="output">
                    <div class="content">La transcripción aparecerá aquí...</div>
                </div>
            </div>
        </div>
        
        <div class="section">
            <h2>📋 Resumen</h2>
            <div id="summary" class="output">El resumen generado por IA aparecerá aquí...</div>
        </div>
        
        <div class="api-keys">
            <div class="api-key">
                <label for="apiKey">Clave de API de Hugging Face:</label>
                <input type="password" id="apiKey" placeholder="Ingresa tu clave de API (hf_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)">
                <div class="note">
                    <strong>Nota:</strong> Necesitas una clave de API de Hugging Face. Obtén una gratis en <a href="https://huggingface.co/settings/tokens" target="_blank">huggingface.co/settings/tokens</a>
                </div>
            </div>
            
            <div class="api-key hidden" id="geminiApiKeyContainer">
                <label for="geminiApiKey">Clave de API de Gemini:</label>
                <input type="password" id="geminiApiKey" placeholder="Ingresa tu clave de API de Gemini">
                
                <div class="connection-options">
                    <label for="connectionMethod">Método de conexión:</label>
                    <select id="connectionMethod">
                        <option value="direct">Conexión directa (puede fallar por CORS)</option>
                        <option value="cors-proxy" selected>Proxy CORS (recomendado)</option>
                    </select>
                    
                    <div id="proxyStatusContainer" class="hidden">
                        <div>Estado de los proxies:</div>
                        <div id="proxy1Status" class="proxy-status">Proxy 1: Verificando...</div>
                        <div id="proxy2Status" class="proxy-status">Proxy 2: Verificando...</div>
                        <div id="proxy3Status" class="proxy-status">Proxy 3: Verificando...</div>
                    </div>
                </div>
                
                <div class="note">
                    <strong>Nota:</strong> Necesitas una clave de API de Gemini. Obtén una gratis en <a href="https://makersuite.google.com/app/apikey" target="_blank">makersuite.google.com/app/apikey</a>
                </div>
            </div>
        </div>
        
        <div class="model-selector">
            <div class="model-option">
                <input type="radio" id="huggingFaceModel" name="aiModel" value="huggingface" checked>
                <label for="huggingFaceModel">Hugging Face</label>
            </div>
            <div class="model-option">
                <input type="radio" id="geminiModel" name="aiModel" value="gemini">
                <label for="geminiModel">Gemini</label>
            </div>
        </div>
        
        <div id="debugContainer" class="hidden">
            <div class="debug-info" id="debugInfo"></div>
        </div>
        
        <div id="solutionContainer" class="hidden">
            <div class="solution-box">
                <h3>🛠️ Solución de problemas</h3>
                <ol>
                    <li><strong>Modelo no encontrado:</strong> El modelo "gemini-pro" ya no está disponible. Usa "gemini-1.5-pro-latest" o "gemini-1.5-flash-latest".</li>
                    <li><strong>Error de proxy:</strong> Si recibes "Respuesta inesperada del proxy", intenta con otro proxy o usa Hugging Face.</li>
                    <li><strong>Problemas de CORS:</strong> Si la conexión directa falla, usa un proxy CORS.</li>
                    <li><strong>Alternativa:</strong> Si persisten los problemas, usa solo Hugging Face que es más estable.</li>
                </ol>
            </div>
        </div>
    </div>

    <script>
        // Elementos del DOM
        const startBtn = document.getElementById('startBtn');
        const stopBtn = document.getElementById('stopBtn');
        const summarizeBtn = document.getElementById('summarizeBtn');
        const toggleApiBtn = document.getElementById('toggleApiBtn');
        const checkModelsBtn = document.getElementById('checkModelsBtn');
        const installBtn = document.getElementById('installBtn');
        const transcriptionDiv = document.getElementById('transcription');
        const summaryDiv = document.getElementById('summary');
        const statusDiv = document.getElementById('status');
        const loader = document.getElementById('loader');
        const apiKeyInput = document.getElementById('apiKey');
        const geminiApiKeyInput = document.getElementById('geminiApiKey');
        const geminiApiKeyContainer = document.getElementById('geminiApiKeyContainer');
        const huggingFaceModelRadio = document.getElementById('huggingFaceModel');
        const geminiModelRadio = document.getElementById('geminiModel');
        const debugContainer = document.getElementById('debugContainer');
        const debugInfo = document.getElementById('debugInfo');
        const connectionMethodSelect = document.getElementById('connectionMethod');
        const proxyStatusContainer = document.getElementById('proxyStatusContainer');
        const proxy1Status = document.getElementById('proxy1Status');
        const proxy2Status = document.getElementById('proxy2Status');
        const proxy3Status = document.getElementById('proxy3Status');
        const solutionContainer = document.getElementById('solutionContainer');
        
        // Variables globales
        let recognition;
        let isRecording = false;
        let apiKeysVisible = false;
        let availableGeminiModels = [];
        let workingProxies = [];
        let deferredPrompt;
        
        // Lista de proxies para intentar
        const proxyList = [
            { name: 'Proxy 1', url: 'https://corsproxy.io/?' },
            { name: 'Proxy 2', url: 'https://api.allorigins.win/raw?url=' },
            { name: 'Proxy 3', url: 'https://thingproxy.freeboard.io/fetch/' }
        ];
        
        // Lista de modelos Gemini conocidos para fallback - actualizados a los más recientes
        const knownGeminiModels = [
            "gemini-1.5-pro-latest",
            "gemini-1.5-flash-latest",
            "gemini-1.0-pro-001",
            "gemini-1.0-pro"
        ];
        
        // Registrar el Service Worker
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .then(registration => {
                        console.log('ServiceWorker registrado con éxito:', registration);
                    })
                    .catch(error => {
                        console.log('Error al registrar el ServiceWorker:', error);
                    });
            });
        }
        
        // Manejar el evento beforeinstallprompt
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            installBtn.style.display = 'inline-block';
        });
        
        // Manejar el evento appinstalled
        window.addEventListener('appinstalled', () => {
            installBtn.style.display = 'none';
            showNotification('¡Aplicación instalada correctamente!');
        });
        
        // Función para mostrar notificación
        function showNotification(message) {
            const notification = document.createElement('div');
            notification.className = 'install-notification';
            notification.innerHTML = `
                <span>${message}</span>
                <button id="closeNotification">Cerrar</button>
            `;
            document.body.appendChild(notification);
            
            document.getElementById('closeNotification').addEventListener('click', () => {
                notification.remove();
            });
            
            setTimeout(() => {
                notification.remove();
            }, 5000);
        }
        
        // Event listener para el botón de instalación
        installBtn.addEventListener('click', async () => {
            if (deferredPrompt) {
                deferredPrompt.prompt();
                const { outcome } = await deferredPrompt.userChoice;
                console.log(`User response to the install prompt: ${outcome}`);
                deferredPrompt = null;
            }
        });
        
        // Inicializar reconocimiento de voz
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            recognition = new SpeechRecognition();
            
            recognition.continuous = true;
            recognition.interimResults = true;
            recognition.lang = 'es-ES'; // Español de España
            
            recognition.onstart = () => {
                isRecording = true;
                statusDiv.textContent = "🎤 Escuchando... Habla ahora";
                startBtn.disabled = true;
                stopBtn.disabled = false;
                summarizeBtn.disabled = true;
            };
            
            recognition.onresult = (event) => {
                let finalTranscript = '';
                let interimTranscript = '';
                
                for (let i = event.resultIndex; i < event.results.length; i++) {
                    const transcript = event.results[i][0].transcript;
                    if (event.results[i].isFinal) {
                        finalTranscript += transcript;
                    } else {
                        interimTranscript += transcript;
                    }
                }
                
                // Actualizar el contenido dentro del div con 3D
                const contentDiv = transcriptionDiv.querySelector('.content');
                if (contentDiv) {
                    contentDiv.textContent = finalTranscript + interimTranscript;
                } else {
                    transcriptionDiv.textContent = finalTranscript + interimTranscript;
                }
            };
            
            recognition.onerror = (event) => {
                console.error('Error en reconocimiento:', event.error);
                statusDiv.textContent = `❌ Error: ${event.error}`;
                resetRecordingState();
            };
            
            recognition.onend = () => {
                if (isRecording) {
                    statusDiv.textContent = "⏹️ Grabación detenida";
                    resetRecordingState();
                    
                    const transcriptionText = transcriptionDiv.querySelector('.content')?.textContent || transcriptionDiv.textContent;
                    if (transcriptionText.trim() !== '') {
                        summarizeBtn.disabled = false;
                    }
                }
            };
        } else {
            statusDiv.textContent = "❌ Tu navegador no soporta reconocimiento de voz. Prueba con Chrome o Safari.";
        }
        
        // Event listeners
        startBtn.addEventListener('click', () => {
            if (recognition) {
                const contentDiv = transcriptionDiv.querySelector('.content');
                if (contentDiv) {
                    contentDiv.textContent = '';
                } else {
                    transcriptionDiv.textContent = '';
                }
                summaryDiv.textContent = 'El resumen generado por IA aparecerá aquí...';
                recognition.start();
            }
        });
        
        stopBtn.addEventListener('click', () => {
            if (recognition && isRecording) {
                recognition.stop();
            }
        });
        
        summarizeBtn.addEventListener('click', generateSummary);
        
        toggleApiBtn.addEventListener('click', () => {
            apiKeysVisible = !apiKeysVisible;
            geminiApiKeyContainer.classList.toggle('hidden');
            checkModelsBtn.classList.toggle('hidden');
            solutionContainer.classList.toggle('hidden');
            toggleApiBtn.textContent = apiKeysVisible ? '🔑 Ocultar APIs' : '🔑 Mostrar APIs';
            
            if (apiKeysVisible && connectionMethodSelect.value === 'cors-proxy') {
                checkProxyStatus();
            }
        });
        
        checkModelsBtn.addEventListener('click', checkAvailableModels);
        
        connectionMethodSelect.addEventListener('change', () => {
            if (connectionMethodSelect.value === 'cors-proxy') {
                proxyStatusContainer.classList.remove('hidden');
                checkProxyStatus();
            } else {
                proxyStatusContainer.classList.add('hidden');
            }
        });
        
        // Funciones
        function resetRecordingState() {
            isRecording = false;
            startBtn.disabled = false;
            stopBtn.disabled = true;
        }
        
        async function generateSummary() {
            const transcriptionText = transcriptionDiv.querySelector('.content')?.textContent || transcriptionDiv.textContent;
            const text = transcriptionText.trim();
            const selectedModel = document.querySelector('input[name="aiModel"]:checked').value;
            
            if (!text) {
                statusDiv.textContent = "❌ No hay texto para resumir";
                return;
            }
            
            statusDiv.textContent = "🔄 Generando resumen con IA...";
            loader.style.display = 'block';
            summarizeBtn.disabled = true;
            
            try {
                if (selectedModel === 'huggingface') {
                    await generateHuggingFaceSummary(text);
                } else if (selectedModel === 'gemini') {
                    await generateGeminiSummary(text);
                }
            } catch (error) {
                console.error('Error generando resumen:', error);
                statusDiv.textContent = `❌ Error: ${error.message}`;
                summaryDiv.textContent = "No se pudo generar el resumen. Verifica tu clave de API e intenta de nuevo.";
            } finally {
                loader.style.display = 'none';
                summarizeBtn.disabled = false;
            }
        }
        
        async function generateHuggingFaceSummary(text) {
            const apiKey = apiKeyInput.value.trim();
            
            if (!apiKey) {
                throw new Error("Ingresa tu clave de API de Hugging Face");
            }
            
            // Usamos el modelo de resumen multilingüe de Hugging Face
            const response = await fetch('https://api-inference.huggingface.co/models/facebook/bart-large-cnn', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${apiKey}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ inputs: text })
            });
            
            if (!response.ok) {
                throw new Error(`Error ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (data && data[0] && data[0].summary_text) {
                summaryDiv.textContent = data[0].summary_text;
                statusDiv.textContent = "✅ ¡Resumen generado con éxito por Hugging Face!";
            } else {
                throw new Error("Respuesta inesperada de la API de Hugging Face");
            }
        }
        
        async function generateGeminiSummary(text) {
            const apiKey = geminiApiKeyInput.value.trim();
            
            if (!apiKey) {
                throw new Error("Ingresa tu clave de API de Gemini");
            }
            
            // Preparamos el prompt para Gemini
            const prompt = `Por favor, resume el siguiente texto en español, manteniendo las ideas principales y siendo conciso:\n\n${text}`;
            
            // Si no tenemos modelos disponibles, usamos los conocidos
            if (availableGeminiModels.length === 0) {
                availableGeminiModels = [...knownGeminiModels];
            }
            
            // Verificamos los proxies si estamos en modo proxy
            if (connectionMethodSelect.value === 'cors-proxy' && workingProxies.length === 0) {
                await checkProxyStatus();
            }
            
            // Intentamos con cada modelo y cada proxy hasta que uno funcione
            let lastError = null;
            
            for (const model of availableGeminiModels) {
                for (const proxy of workingProxies.length > 0 ? workingProxies : proxyList) {
                    try {
                        debugInfo.textContent = `Intentando con modelo: ${model} y proxy: ${proxy.name}`;
                        debugContainer.classList.remove('hidden');
                        
                        const result = await tryGenerateWithModel(apiKey, model, prompt, proxy);
                        summaryDiv.textContent = result;
                        statusDiv.textContent = `✅ ¡Resumen generado con éxito por Gemini (${model}) usando ${proxy.name}!`;
                        return;
                    } catch (error) {
                        console.warn(`Error con modelo ${model} y proxy ${proxy.name}:`, error);
                        lastError = error;
                        debugInfo.textContent += `\nError con ${model} y ${proxy.name}: ${error.message}`;
                    }
                }
            }
            
            // Si llegamos aquí, todo falló
            throw lastError || new Error("Todos los modelos y proxies de Gemini fallaron");
        }
        
        async function tryGenerateWithModel(apiKey, model, prompt, proxy = null) {
            const connectionMethod = connectionMethodSelect.value;
            let url;
            
            // Construimos la URL base de la API de Gemini
            const baseUrl = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;
            
            if (connectionMethod === 'cors-proxy' && proxy) {
                // Usamos el proxy seleccionado
                if (proxy.url.includes('allorigins')) {
                    // allorigins requiere codificación especial
                    url = `${proxy.url}${encodeURIComponent(baseUrl)}`;
                } else if (proxy.url.includes('corsproxy.io')) {
                    // corsproxy.io requiere codificación especial
                    url = `${proxy.url}${encodeURIComponent(baseUrl)}`;
                } else {
                    // thingproxy y otros proxies
                    url = `${proxy.url}${encodeURIComponent(baseUrl)}`;
                }
            } else {
                // Conexión directa
                url = baseUrl;
            }
            
            debugInfo.textContent = `Usando modelo: ${model}\nURL: ${url}\nProxy: ${proxy ? proxy.name : 'Ninguno'}`;
            debugContainer.classList.remove('hidden');
            
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: prompt
                        }]
                    }]
                })
            });
            
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                const errorMessage = errorData.error?.message || response.statusText;
                throw new Error(`Error ${response.status}: ${errorMessage}`);
            }
            
            // Procesamos la respuesta según el proxy
            let data;
            let responseText = await response.text();
            
            try {
                if (proxy && proxy.url.includes('allorigins')) {
                    // Para allorigins, intentamos parsear directamente
                    data = JSON.parse(responseText);
                } else {
                    // Para otros proxies y conexión directa
                    data = JSON.parse(responseText);
                }
            } catch (e) {
                console.error("Error parsing JSON response:", e);
                console.log("Response text:", responseText);
                throw new Error("Error al procesar la respuesta de la API");
            }
            
            if (data && data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts[0]) {
                return data.candidates[0].content.parts[0].text;
            } else {
                console.error("Unexpected API response:", data);
                throw new Error("Respuesta inesperada de la API de Gemini");
            }
        }
        
        async function checkProxyStatus() {
            proxyStatusContainer.classList.remove('hidden');
            proxy1Status.textContent = "Proxy 1: Verificando...";
            proxy1Status.className = "proxy-status";
            proxy2Status.textContent = "Proxy 2: Verificando...";
            proxy2Status.className = "proxy-status";
            proxy3Status.textContent = "Proxy 3: Verificando...";
            proxy3Status.className = "proxy-status";
            
            workingProxies = [];
            
            // URL de prueba simple
            const testUrl = "https://generativelanguage.googleapis.com/v1beta/models";
            
            for (let i = 0; i < proxyList.length; i++) {
                const proxy = proxyList[i];
                let url;
                
                if (proxy.url.includes('allorigins')) {
                    url = `${proxy.url}${encodeURIComponent(testUrl)}`;
                } else if (proxy.url.includes('corsproxy.io')) {
                    url = `${proxy.url}${encodeURIComponent(testUrl)}`;
                } else {
                    url = `${proxy.url}${encodeURIComponent(testUrl)}`;
                }
                
                try {
                    const response = await fetch(url);
                    if (response.ok) {
                        workingProxies.push(proxy);
                        const statusElement = i === 0 ? proxy1Status : i === 1 ? proxy2Status : proxy3Status;
                        statusElement.textContent = `${proxy.name}: Funcionando ✅`;
                        statusElement.className = "proxy-status proxy-working";
                    } else {
                        throw new Error(`Status ${response.status}`);
                    }
                } catch (error) {
                    const statusElement = i === 0 ? proxy1Status : i === 1 ? proxy2Status : proxy3Status;
                    statusElement.textContent = `${proxy.name}: Fallido ❌`;
                    statusElement.className = "proxy-status proxy-failed";
                }
            }
            
            if (workingProxies.length === 0) {
                statusDiv.textContent = "⚠️ Ningún proxy funcionó. Intenta con conexión directa o usa Hugging Face.";
            } else {
                statusDiv.textContent = `✅ ${workingProxies.length} proxy(s) funcionando correctamente.`;
            }
        }
        
        async function checkAvailableModels() {
            const apiKey = geminiApiKeyInput.value.trim();
            
            if (!apiKey) {
                statusDiv.textContent = "❌ Ingresa tu clave de API de Gemini para verificar los modelos disponibles";
                return;
            }
            
            statusDiv.textContent = "🔍 Verificando modelos disponibles...";
            loader.style.display = 'block';
            
            try {
                // Si estamos en modo proxy, verificamos los proxies primero
                if (connectionMethodSelect.value === 'cors-proxy' && workingProxies.length === 0) {
                    await checkProxyStatus();
                }
                
                const connectionMethod = connectionMethodSelect.value;
                let baseUrl = `https://generativelanguage.googleapis.com/v1beta/models`;
                
                if (connectionMethod === 'cors-proxy' && workingProxies.length > 0) {
                    const proxy = workingProxies[0];
                    if (proxy.url.includes('allorigins')) {
                        baseUrl = `${proxy.url}${encodeURIComponent(`${baseUrl}?key=${apiKey}`)}`;
                    } else if (proxy.url.includes('corsproxy.io')) {
                        baseUrl = `${proxy.url}${encodeURIComponent(`${baseUrl}?key=${apiKey}`)}`;
                    } else {
                        baseUrl = `${proxy.url}${encodeURIComponent(`${baseUrl}?key=${apiKey}`)}`;
                    }
                } else {
                    baseUrl = `${baseUrl}?key=${apiKey}`;
                }
                
                debugInfo.textContent = `Verificando modelos con URL: ${baseUrl}`;
                debugContainer.classList.remove('hidden');
                
                const response = await fetch(baseUrl);
                
                if (!response.ok) {
                    throw new Error(`Error ${response.status}: ${response.statusText}`);
                }
                
                let data;
                let responseText = await response.text();
                
                try {
                    if (connectionMethod === 'cors-proxy' && workingProxies.length > 0 && workingProxies[0].url.includes('allorigins')) {
                        data = JSON.parse(responseText);
                    } else {
                        data = JSON.parse(responseText);
                    }
                } catch (e) {
                    console.error("Error parsing JSON:", e);
                    console.log("Response text:", responseText);
                    throw new Error("Error al procesar la respuesta de la API");
                }
                
                // Filtramos modelos que soportan generateContent
                availableGeminiModels = [];
                
                if (data.models && data.models.length > 0) {
                    data.models.forEach(model => {
                        if (model.supportedGenerationMethods && model.supportedGenerationMethods.includes('generateContent')) {
                            availableGeminiModels.push(model.name);
                        }
                    });
                }
                
                // Mostramos la información de depuración
                debugInfo.textContent = "Modelos disponibles que soportan generateContent:\n";
                if (availableGeminiModels.length > 0) {
                    availableGeminiModels.forEach(model => {
                        debugInfo.textContent += `- ${model}\n`;
                    });
                } else {
                    debugInfo.textContent += "No se encontraron modelos que soporten generateContent\n";
                    
                    // Mostramos todos los modelos para depuración
                    debugInfo.textContent += "\nTodos los modelos encontrados:\n";
                    data.models.forEach(model => {
                        debugInfo.textContent += `- ${model.name} (${model.supportedGenerationMethods ? model.supportedGenerationMethods.join(', ') : 'métodos no especificados'})\n`;
                    });
                }
                
                debugContainer.classList.remove('hidden');
                statusDiv.textContent = `✅ Se encontraron ${availableGeminiModels.length} modelos disponibles`;
            } catch (error) {
                console.error('Error verificando modelos:', error);
                statusDiv.textContent = `❌ Error: ${error.message}`;
                debugInfo.textContent = `Error: ${error.message}\n\nUsando modelos conocidos como fallback:\n`;
                knownGeminiModels.forEach(model => {
                    debugInfo.textContent += `- ${model}\n`;
                });
                availableGeminiModels = [...knownGeminiModels];
                debugContainer.classList.remove('hidden');
            } finally {
                loader.style.display = 'none';
            }
        }
    </script>
</body>
</html>
